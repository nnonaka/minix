diff -rNU3 dist-2/binutils/dwarf.c dist-3/binutils/dwarf.c
--- dist-2/binutils/dwarf.c	2020-01-18 22:55:47.000000000 +0900
+++ dist-3/binutils/dwarf.c	2023-03-25 14:14:07.552640464 +0900
@@ -28,6 +28,7 @@
 #include "dwarf2.h"
 #include "dwarf.h"
 #include "gdb/gdb-index.h"
+#include "getopt.h"
 #include "filenames.h"
 #include "safe-ctype.h"
 #include <assert.h>
diff -rNU3 dist-2/gold/configure dist-3/gold/configure
--- dist-2/gold/configure	2020-01-18 23:04:34.000000000 +0900
+++ dist-3/gold/configure	2023-03-25 14:40:01.782614235 +0900
@@ -9741,6 +9741,20 @@
 
 done
 
+for ac_header in unordered_set unordered_map
+do :
+  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
+ac_fn_cxx_check_header_mongrel "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default"
+eval as_val=\$$as_ac_Header
+   if test "x$as_val" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
+_ACEOF
+
+fi
+
+done
+
 for ac_header in tr1/unordered_set tr1/unordered_map
 do :
   as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
@@ -9866,6 +9880,91 @@
 esac
 
 
+for ac_header in windows.h
+do :
+  ac_fn_cxx_check_header_mongrel "$LINENO" "windows.h" "ac_cv_header_windows_h" "$ac_includes_default"
+if test "x$ac_cv_header_windows_h" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_WINDOWS_H 1
+_ACEOF
+
+fi
+
+done
+
+for ac_header in dlfcn.h
+do :
+  ac_fn_cxx_check_header_mongrel "$LINENO" "dlfcn.h" "ac_cv_header_dlfcn_h" "$ac_includes_default"
+if test "x$ac_cv_header_dlfcn_h" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_DLFCN_H 1
+_ACEOF
+
+fi
+
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for library containing dlopen" >&5
+$as_echo_n "checking for library containing dlopen... " >&6; }
+if test "${ac_cv_search_dlopen+set}" = set; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_func_search_save_LIBS=$LIBS
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char dlopen ();
+int
+main ()
+{
+return dlopen ();
+  ;
+  return 0;
+}
+_ACEOF
+for ac_lib in '' dl dld; do
+  if test -z "$ac_lib"; then
+    ac_res="none required"
+  else
+    ac_res=-l$ac_lib
+    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+  fi
+  if ac_fn_cxx_try_link "$LINENO"; then :
+  ac_cv_search_dlopen=$ac_res
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext
+  if test "${ac_cv_search_dlopen+set}" = set; then :
+  break
+fi
+done
+if test "${ac_cv_search_dlopen+set}" = set; then :
+
+else
+  ac_cv_search_dlopen=no
+fi
+rm conftest.$ac_ext
+LIBS=$ac_func_search_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_dlopen" >&5
+$as_echo "$ac_cv_search_dlopen" >&6; }
+ac_res=$ac_cv_search_dlopen
+if test "$ac_res" != no; then :
+  test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"
+
+fi
+
+case "$ac_cv_search_dlopen" in
+  no*) DLOPEN_LIBS="";;
+  *)   DLOPEN_LIBS="$ac_cv_search_dlopen";;
+esac
+
 for ac_func in mallinfo posix_fallocate fallocate readv sysconf times mkdtemp
 do :
   as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
diff -rNU3 dist-2/gold/i386.cc dist-3/gold/i386.cc
--- dist-2/gold/i386.cc	2020-01-18 22:55:48.000000000 +0900
+++ dist-3/gold/i386.cc	2023-03-25 14:39:40.589297551 +0900
@@ -2684,6 +2684,10 @@
   Symbol* sym = this->global_offset_table_;
   if (sym != NULL)
     {
+      // create a plt
+      if (this->plt_ == NULL)
+        this->make_plt_section(symtab, layout);
+
       uint32_t data_size = this->got_plt_->current_data_size();
       symtab->get_sized_symbol<32>(sym)->set_symsize(data_size);
     }
@@ -4054,8 +4058,8 @@
 public:
   Target_selector_i386()
     : Target_selector_freebsd(elfcpp::EM_386, 32, false,
-			      "elf32-i386", "elf32-i386-freebsd",
-			      "elf_i386")
+			      "elf_i386_minix", "elf32-i386-freebsd",
+			      "elf_i386_minix")
   { }
 
   Target*
diff -rNU3 dist-2/include/safe-ctype.h dist-3/include/safe-ctype.h
--- dist-2/include/safe-ctype.h	2020-01-18 22:55:48.000000000 +0900
+++ dist-3/include/safe-ctype.h	2023-03-25 14:40:21.245582126 +0900
@@ -119,6 +119,7 @@
    including another system header (for instance gnulib's stdint.h).
    So we include ctype.h here and then immediately redefine its macros.  */
 
+#if !defined(__minix) || !defined(__clang__)
 #include <ctype.h>
 #undef isalpha
 #define isalpha(c) do_not_use_isalpha_with_safe_ctype
@@ -145,6 +146,34 @@
 #undef toupper
 #define toupper(c) do_not_use_toupper_with_safe_ctype
 #undef tolower
-#define tolower(c) do_not_use_tolower_with_safe_ctype
+#else
+#include <ctype.h>
+#undef isalpha
+#define isalpha(c) ISALPHA(c)
+#undef isalnum
+#define isalnum(c) ISALNUM(c)
+#undef iscntrl
+#define iscntrl(c) ISCNTRL(c)
+#undef isdigit
+#define isdigit(c) ISDIGIT(c)
+#undef isgraph
+#define isgraph(c) ISGRAPH(c)
+#undef islower
+#define islower(c) ISLOWER(c)
+#undef isprint
+#define isprint(c) ISPRINT(c)
+#undef ispunct
+#define ispunct(c) ISPUNCT(c)
+#undef isspace
+#define isspace(c) ISSPACE(c)
+#undef isupper
+#define isupper(c) ISUPPER(c)
+#undef isxdigit
+#define isxdigit(c) ISXDIGIT(c)
+#undef toupper
+#define toupper(c) TOUPPER(c)
+#undef tolower
+#define tolower(c) TOLOWER(c)
+#endif /* !defined(__minix) || !defined(__clang__) */
 
 #endif /* SAFE_CTYPE_H */
